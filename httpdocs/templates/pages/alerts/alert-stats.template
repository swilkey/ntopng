{#
    (C) 2021 - ntop.org    
    Base template for the alert tables.
#}

<link rel="stylesheet" href='{{ ntop.getHttpPrefix() }}/css/apexcharts.css'/>

<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/apexchart/apexcharts.min.js?{{ ntop.getStaticFileEpoch() }}'></script>
<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/widgets/widgets.js?{{ ntop.getStaticFileEpoch() }}'></script>

<div class='row'>
    <div class='col-12'>
        <div class="d-flex p-2 mb-2 navbar-shadow border-radius navbar-light bg-light align-items-center">
            {* ui_utils.render_datetime_range_picker(range_picker) *}
        </div>
    </div>
    <div class="col-12 mb-2">
        <div class="card" >
            <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                      <span class="sr-only">Loading...</span>
                </div>
            </div>
        </div>
            <div class="card-body">
                {* widget_gui_utils.render_chart(chart.name, {
                    displaying_label = ""
                }) *}
            </div>
        </div>
    </div>
    <div class='col-12'>
        <div class="card card-shadow">
	        <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                          <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                      <a class="nav-link {{ (alert_stats.status ~= 'engaged' and 'active' or '') }}" href="?page={{ alert_stats.entity }}">{{ i18n("show_alerts.past_alerts") }}</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ (alert_stats.status == 'engaged' and 'active' or '') }}" href="?status=engaged&page={{ alert_stats.entity }}">{{ i18n("show_alerts.engaged_alerts") }}</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <table id='{{ datatable.name }}' class='table table-striped table-bordered w-100'> 
                    <thead>
                       {* datatable.table *}
                    </thead>
                </table>
            </div>
            <div class="card-footer">
                <button id="btn-get-permalink" class="btn btn-secondary">
                    <i class="fas fa-link"></i> {{ i18n('graphs.get_permanent_link') }}
                </button>
                <a id="btn-download-records" download="nindex_query.json" class="btn btn-secondary" href="/">
                    <i class="fas fa-file-download"></i> {{ i18n('graphs.download_records') }}
                </a>
            </div>
        </div>
    </div>
</div>

{# Add modals if defined #}
{% if datatable.modals then %}
<div class="modals">
    {% for _, modal in pairs(datatable.modals) do %}
        {* modal *}
    {% end %}
</div>
{% end %}

<link href="{{ ntop.getHttpPrefix() }}/datatables/datatables.min.css" rel="stylesheet"/>
<script type="text/javascript">
    i18n.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
</script>
<script type='text/javascript'>
    $(document).ready(function(){

        const INITIAL_ROWS_LENGTH = {{datatable.initialLength}};
        const datasourceParams = {* json.encode(datatable.datasource.params) *};

        const $inputBeginEpoch = $(`#begin-epoch`);
        const $inputEndEpoch = $(`#end-epoch`);
        const $btnGetPermaLink = $(`#btn-get-permalink`);

	    /* Show an overlay to hide loading */
        function toggleOverlays(time = 500) {
            $(`.overlay`).toggle(time);
        }

        function showOverlays(time = 500) {
            $(`.overlay`).fadeIn(time);
        }

        function hideOverlays(time = 500) {
            $(`.overlay`).fadeOut(time);
        }

        function copyDatasourceParams() {

            const [begin, end] = getTimestampRange();
            if (begin == null && end == null) return {};

            const copyParams = Object.assign(datasourceParams, {});

            // override the existing timestamps 
            if (copyParams.epoch_begin) copyParams.epoch_begin = begin.unix();
            if (copyParams.epoch_end) copyParams.epoch_end = end.unix();

            return copyParams;
        }

        async function reloadTable($table, ) {

            const copyParams = copyDatasourceParams();
            const searchParams = new URLSearchParams(Object.entries(copyParams));
	        toggleOverlays();
	    
            // reload the table
            $table.ajax.url(`{* datatable.datasource.name *}?${searchParams.toString()}`).load();
            WidgetUtils.getWidgetByName("{{ chart.name }}").update(copyDatasourceParams());

        }

        function printQueryTime($table) {
            const response = $table.ajax.json();
            // if the response contains the query time period
            if (response.rsp.stats !== undefined) {
                const msec = response.rsp.stats.query_duration_msec / 1000.0;
                $(`#{{ datatable.name }}-query`).show();
                $(`#{{ datatable.name }}-query .seconds`).text((msec < 0.001) ? '< 0.001' : msec); // The time is in msec
            }
        }

        function getTimestampRange() {
            const begin = $(`#begin-epoch`).datetimepicker('date').utc();
            const end = $(`#end-epoch`).datetimepicker('date').utc();
            return [begin, end];
        }

        function pushNewHistoryState(begin, end, len) {
            
            const url = new URL(location);
            const searchParams = new URLSearchParams();

            searchParams.set('epoch_begin', begin.unix());
            searchParams.set('epoch_end', end.unix());

            // get all filters tags
            const tags = tagify.getTagElms();

            // add the tag filters inside the search params object
            for (const tag of tags) {

                const key = tag.getAttribute('key');
                const selectedOperator = tag.getAttribute('selectedoperator');
                const value = tag.getAttribute('value');

                searchParams.set(key, `${value},${selectedOperator}`);
            }

            url.search = searchParams.toString() + "&page=" + url.searchParams.get('page');
            window.history.pushState({epoch_begin: begin.unix(), epoch_end: end.unix()}, '', url);
        }

        async function onRangePickerChange(pushHistroy = false) {
            
            const [begin, end] = getTimestampRange();
            await reloadTable($table);

            // update the link of the download button
            const href = $(`#btn-download-records`).attr('href');
            const newDownloadURL = new URL(href, location.origin);
            newDownloadURL.search = new URLSearchParams(datasourceParams); 
            $(`#btn-download-records`).attr('href', newDownloadURL.toString());

            if (pushHistroy) {
                pushNewHistoryState(begin, end);
            }

        }

        function loadColumns() {

            let columns = [];
            {% if datatable.js_columns then %}
                columns = {* datatable.js_columns *};
            {% end %}

            /* Actions Column */
            columns.push({width: '5%', targets: -1, className: 'text-center', orderable: false, data: null, render: (type) => {
                return DataTableUtils.createActionButtons([
                    /* The disable action button is valid only for hosts and flows */
                    {icon: 'fa-bell-slash', label: "{{ i18n('disable') }}", modal: '#', class: "{{ (datatable.actions.disable and 'disabled' or '') }}"},
                    {icon: 'fas fa-unlock', label: "{{ i18n('show_alerts.release_alert_action') }}", modal: '#'},
                    {icon: 'fa fa-trash', label: "{{ i18n('remove') }}", modal: '#delete_alert_dialog' },
                ]);
            }});

            return columns;
        }

        const datatableButton = {* (datatable.buttons or '[]') *};
        datatableButton.push({
            text: '<i class="fas fa-sync"></i>',
            action: async function (e, dt, node, config) {
                await onRangePickerChange();
            }
        });

        let config = DataTableUtils.getStdDatatableConfig(datatableButton);
        config = DataTableUtils.extendConfig(config, {
	        serverSide: true,
            searching: false,
            ajax: {
                method: 'get',
                url: '{* datatable.datasource.endpoint *}',
                dataSrc: 'rsp.records',
                data: (data, settings) => {

                    const tableApi = settings.oInstance.api();
                    const orderColumnIndex = data.order[0].column;
                    const orderColumnName = tableApi.column(orderColumnIndex).name() || undefined;
                    
                    if (data.order) {
                        const order = data.order[0].dir;
                        delete data.order;
                        data.sort = orderColumnName;
                        data.order = order;
                    }

                    delete data.columns;
                    delete data.search;
                   
                    // create visibleColumns field
                    const visibleColumns = [];
                    tableApi.columns().every(function(idx) {
                        
                        const $column = tableApi.column(idx);
                        if ($column.visible() && $column.name() !== '') {
                            visibleColumns.push($column.name());
                        } 
                    });

                    data.visible_columns = visibleColumns.join(',');

                    return data;
                }
            },
            lengthMenu: [[INITIAL_ROWS_LENGTH, 50, 100, 250], [INITIAL_ROWS_LENGTH, 50, 100, 250]],
            columns: loadColumns()
        });

        const $table = $(`#{{ datatable.name }}`).DataTable(config);
        DataTableUtils.addToggleColumnsDropdown($table, function(col, visible) {
            $table.ajax.reload();
        });

        // on ajax request complete then print the query time
        $table.on('xhr', function() {
            printQueryTime($table);
            hideOverlays();
	    });

        // on apply button click
        $(`#btn-apply`).on('click', async function() {
            await onRangePickerChange(true);
        });

        $(`#select-len`).on('change', async function() {
            await onRangePickerChange(true);
        });

        // when an user remove the tag
        tagify.on('remove', async function(e) {

            const key = e.detail.data.key;

            if (datasourceParams[key] !== undefined) {
                delete datasourceParams[key];
            }

            await onRangePickerChange(true);
        });

        tagify.on('add', async function(e) {

            const detail = e.detail;

            if (detail.data === undefined) {
                return;
            }

            const tag = detail.data;
            const $tag = $(`tag[key='${tag.key}']`);

            // add/update datasource params, default operator `=`
            datasourceParams[tag.key] = `${tag.value},eq`;
            // set the selected operator to '='
            $tag.attr("selectedoperator", "eq");

            // trigger request
            await onRangePickerChange(true);
        });

        $(`tags`).on('change', 'select.operator', async function(e) {
            
            // update the tag and the operator
            const $tag = $(this).parents('tag');
            const selectedOperator = $(this).val();

            $tag.attr("selectedoperator", selectedOperator);
            datasourceParams[$tag.attr('key')] = `${$tag.attr('value')},${selectedOperator}`;

            // trigger request
            await onRangePickerChange(true);
        });

	    // clear all the filters on click
        $(".btn-remove-tags").on('click', async function() {

            const tags = tagify.getTagElms();
            for (const tag of tags) {
                const key = tag.getAttribute('key');
                if (datasourceParams[key]) {
                    delete datasourceParams[key];
                }
            }

            tagify.removeAllTags();

            await onRangePickerChange(true);
        });

        $table.on('click', `a.tag-filter`, async function (e) {
            e.preventDefault();
            // the tag key is contained inside the column's name
            const colIndex = $table.cell($(this).parent()).index().column;
            const data = $table.cell($(this).parent()).data();
            const key = $table.column(colIndex).name();
            const label = i18n.tags[key];

            const tag = { label: label, key: key, value: (data.label) ? data.label : data };

            // does the tag exist?
            const existingTag = tagify.getTagElms().find(htmlTag => htmlTag.getAttribute('key') === tag.key);
            if (existingTag !== undefined && existingTag.getAttribute('value') !== tag.value) {

                const prevSelectedOperator = $(`tag[key='${tag.key}']`).attr("selectedoperator") || 'eq';

                // replace the tag!
                tagify.replaceTag(existingTag, tag);

                // update the datasource params
                datasourceParams[tag.key] = `${tag.value},${prevSelectedOperator}`;
                $(`tag[key='${tag.key}']`).attr("selectedoperator", prevSelectedOperator);

                await onRangePickerChange(true);

                return;
            } 

            // has the tag an operator object?
            if (!Array.isArray(DEFINED_TAGS[key])) {
                tag.operators = DEFINED_TAGS[key].operators;
            }

            tag.selectedOperator = 'eq';

            // add filter!
            tagify.addTags([tag]);
        });
    
        // when the user navigates using the browser's arrows
        // set the input boxes with their respective values
        $(window).on('popstate', function(e) {
            const {state} = e.originalEvent;
            const {epoch_begin, epoch_end} = state;    
            $inputBeginEpoch.datetimepicker('date', moment(epoch_begin, 'X'));
            $inputEndEpoch.datetimepicker('date', moment(epoch_end, 'X'));
        });

        $btnGetPermaLink.on('click', function() {

            const $this = $(this);
            
            const dummyInput = document.createElement('input');
            dummyInput.value = location.href;
            document.body.appendChild(dummyInput);
            dummyInput.select();

            // copy the url to the clipboard from the dummy input
            document.execCommand("copy");
            document.body.removeChild(dummyInput);

            $this.attr("title", "Copied!")
                .tooltip("dispose")
                .tooltip()
                .tooltip("show");
        });

        ChartWidget.registerEventCallback("{{ chart.name }}", 'zoomed', async (chartContext, { xaxis, yaxis }) => {
           
            // the timestamps are in milliseconds, convert them into seconds
            const begin = moment(xaxis.min);
            const end = moment(xaxis.max);
            
            $inputBeginEpoch.datetimepicker('date', begin);
            $inputEndEpoch.datetimepicker('date', end);

            // TODO: complete
            await onRangePickerChange(true);

        });
    });
</script>