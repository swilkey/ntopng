{#
    (C) 2021 - ntop.org    
#}

{%
    -- if there are set the _GET["begin_epoch"] && _GET["end_epoch"]
    -- then select the `Custom` Label 
    local presetSelected = not (isEmptyString(_GET['begin_epoch']) or isEmptyString(_GET['epoch_begin'])) 
        and (isEmptyString(_GET['epoch_end']) or isEmptyString(_GET['end_epoch']))   

%}

<div class="d-flex flex-wrap flex-sm-column flex-md-row w-100">
    <div class="btn-group btn-group-toggle" role="group">
        {% if (presets.five_mins) or (presets.five_mins ~= false) then %}
        <label class="btn {{ (presetSelected and 'btn-primary' or 'btn-light') }}">
            <input type="radio" name="presets" id="preset-5min" checked value="5,minutes"> 5m
        </label>
        {% end %}
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-30m" value="30,minutes"> 30m
        </label>
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-1h" value="1,hours"> 1h
        </label>
        {% if (presets.day == nil) or presets.day then %}
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-1d" value="1,days"> 1d
        </label>
        {% end %}
        {% if (presets.week == nil) or presets.week then %}
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-1w" value="1,weeks"> 1w
        </label>
        {% end %}
        {% if (presets.month == nil) or presets.month then %}
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-1M" value="1,months"> 1M
        </label>
        {% end %}
        {% if (presets.year == nil) or presets.year then %}
        <label class="btn btn-light">
            <input type="radio" name="presets" id="preset-1Y" value="1,years"> 1Y
        </label>
        {% end %}
        <label id="btn-custom-preset" class="btn {{ (not presetSelected and 'btn-primary' or 'btn-light disabled') }}">{{ i18n("graphs.custom") }}</label>
    </div>
    <div class="input-group my-sm-2 my-md-0 flex-shrink-1 mx-sm-0 mx-md-2 fit-content">
        <div class="input-group-prepend">
            <span class="input-group-text">
                <i class="fas fa-calendar-alt"></i>
            </span>
        </div>
        <input id='begin-epoch' type="text" aria-label="Begin" data-toggle="datetimepicker"
            class="form-control datetimepicker-input border-right-0" data-target="#begin-epoch">
        <div class="input-group-append">
            <span class="input-group-text bg-transparent border-left-0 border-right-0">
                <i class="fas fa-long-arrow-alt-right"></i>
            </span>
        </div>
        <input id='end-epoch' type="text" aria-label="End" data-toggle="datetimepicker"
            class="form-control datetimepicker-input border-left-0" data-target="#end-epoch">
    </div>
    <button id="btn-apply" class="btn btn-primary">{{ i18n("apply") }}</button>
    <div class="btn-group my-sm-2 my-md-0 mx-sm-0 mx-md-2 btn-group-sm">
        <button class="btn btn-link" id="btn-jump-time-back">
            <i class="fas fa-arrow-left"></i>
        </button>
        <button class="btn btn-link mr-2" disabled id="btn-jump-time-ahead">
            <i class="fas fa-arrow-right"></i>
        </button>
        <button class="btn btn-link" id="btn-zoom-in">
            <i class="fas fa-search-plus"></i>
        </button>
        <button class="btn btn-link" id="btn-zoom-out">
            <i class="fas fa-search-minus"></i>
        </button>
    </div>
    {% if tags.enabled then %}
    <div class="w-100 mt-2">
        <div class="d-flex">
            <input class="form-control w-100" name="tags" placeholder="Filters" > 
            <button data-toggle="tooltip" data-placement="bottom" title="Remove filters." class="btn btn-danger ml-1 btn-remove-tags">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>
    {% end %}
</div>

{% if tags.enabled then %}
<link rel="stylesheet" href="{{ ntop.getHttpPrefix }}/css/tagify.css" />
<style>
.tagify__input {
  min-width: 175px;
}

.tagify__tag {
  white-space: nowrap;
  margin: 3px 0px 5px 5px;
}
.tagify__tag select.operator {
  margin: 0px 4px;
  border: 1px solid #c4c4c4;
  border-radius: 4px;
}
.tagify__tag b.operator {
  margin: 0px 4px;
  background-color: white;
  border: 1px solid #c4c4c4;
  border-radius: 4px;
  padding: 0.05em 0.2em;
}
.tagify__tag > div {
  display: flex;
  align-items: center;
}
</style>
<script type="text/javascript" src="{{ ntop.getHttpPrefix }}/js/tagify.min.js"></script>
<script type="text/javascript">

i18n.tags = {* json.encode(tags.localization) *};

const TAG_OPERATORS = {* json.encode(tags.tag_operators) *};
const DEFINED_TAGS = {* json.encode(tags.defined_tags) *};

const initialTags =  {* json.encode(tags.values) *};
const input = $(`[name='tags']`)[0];

const tagify = new Tagify(input, {
    duplicate: false,
    delimiters : null,
    dropdown : {
        enabled: 1, // suggest tags after a single character input
        classname : 'extra-properties' // custom class for the suggestions dropdown
    },
    autoComplete: { enabled: false },
    templates : {
        tag : function(tagData){
            try{
                return `<tag title='${tagData.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${tagData.class ? tagData.class : ""}' ${this.getAttributes(tagData)}>
                        <x title='remove tag' class='tagify__tag__removeBtn'></x>
                        <div>
                            ${tagData.label ? `<b>${tagData.label}</b>&nbsp;` : ``}
                            ${tagData.operators ? `<select class='operator'>${tagData.operators.map(op => `<option ${tagData.selectedOperator === op ? 'selected' : ''} value='${op}'>${TAG_OPERATORS[op]}</option>`).join()}</select>` : `<b class='operator'>=</b>`}&nbsp;
                            <span class='tagify__tag-text'>${tagData.value}</span>
                        </div>
                    </tag>`
            }
            catch(err){
                console.error(`An error occured when creating a new tag: ${err}`);
            }
        },
    }
});

$(document).ready(function() {
    // add existing tags
    tagify.addTags(initialTags);
    // intialize tooltip
    $(`.btn-remove-tags`).tooltip();
});
</script>
{% end %}
<script type="text/javascript">
const beginEpoch = {{ (_GET['begin_epoch'] or _GET['epoch_begin'] or 'undefined') }};
const endEpoch = {{ (_GET['end_epoch'] or _GET['epoch_end'] or 'undefined') }};
</script>
<script type='text/javascript'>
    $(document).ready(function() {
        
        const MAX_ZOOM_IN = {{ (max_delta_in) }}; // 5 minutes
        const MAX_ZOOM_OUT = {{ (max_delta_out) }}; // 12 hours

        const now = (endEpoch === undefined) ? moment() : moment(endEpoch, 'X');
        const prev = (beginEpoch === undefined) ? moment().subtract({{ (presets.five_mins and '5' or '30') }}, 'minutes') : moment(beginEpoch, 'X');

        const $inputBeginEpoch = $(`#begin-epoch`);
        const $inputEndEpoch = $(`#end-epoch`);

        const $btnApply = $(`#btn-apply`);
        const $btnJumpTimeBack = $(`#btn-jump-time-back`);
        const $btnJumpTimeAhead = $(`#btn-jump-time-ahead`);
        const $btnZoomIn = $(`#btn-zoom-in`);
        const $btnZoomOut = $(`#btn-zoom-out`);

        const $btnCustomPreset = $(`#btn-custom-preset`);

        function updateRangePicker(operation, maxDate) {

            const [subtract, measure] = $(`[name='presets']:checked`).val().split(',');
            const begin = $inputBeginEpoch.datetimepicker('date');
            const end = $inputEndEpoch.datetimepicker('date');

            $inputBeginEpoch.datetimepicker('date', begin[operation](parseInt(subtract), measure));
            $inputEndEpoch.datetimepicker('date', end[operation](parseInt(subtract), measure));

            $btnCustomPreset.parents('.btn-group').find('.btn').removeClass('btn-primary');
            $btnCustomPreset.addClass('btn-primary').removeClass('btn-light');

            // if the new end time is less than the max current date then
            // enable the jump time ahead button, otherwise disable it
            if (end < maxDate) {
                $btnJumpTimeAhead.removeAttr('disabled');
            }
            else {
                $btnJumpTimeAhead.attr('disabled', 'disabled');
            }

        }

        // initialize timepickers
        $inputBeginEpoch.datetimepicker({format: 'DD/MM/YYYY HH:mm:ss', maxDate: moment(), useCurrent: false});
        $inputEndEpoch.datetimepicker({format: 'DD/MM/YYYY HH:mm:ss', maxDate: moment(), useCurrent: false});

        $inputBeginEpoch.datetimepicker('date', prev);
        $inputEndEpoch.datetimepicker('date', now);

        $(`[name='presets']`).on('change', function() {

            // remove the active class
            $(this)
                .parents('.btn-group')
                .find('.btn')
                .removeClass('btn-primary')
                .addClass('btn-light');

            $(this).parents('.btn').addClass('btn-primary').removeClass('btn-light');

            const [subtract, measure] = $(this).val().split(',');

            const now = moment();
            const diff = moment().subtract(parseInt(subtract), measure);

            $inputEndEpoch.datetimepicker('minDate', diff);
            $inputEndEpoch.datetimepicker('maxDate', now);

            $inputEndEpoch.datetimepicker('date', now);
            $inputBeginEpoch.datetimepicker('date', diff);

            $btnApply.trigger('click');
        });

        // travel back in the past by the selected preset
        $btnJumpTimeBack.on('click', function() {
            updateRangePicker('subtract', now);
            // trigger the apply event
            $(`#btn-apply`).trigger('click');
        });

        // travel ahead in the future by the selected preset
        $btnJumpTimeAhead.on('click', function() {
            updateRangePicker('add', now);
            // trigger the apply event
            $(`#btn-apply`).trigger('click');
        });

        const calculateHalfZoomIn = () => {

            const begin = $inputBeginEpoch.datetimepicker('date');
            const end = $inputEndEpoch.datetimepicker('date');

            const delta = end.unix() - begin.unix();
            const zoomIn = delta / 3;
            const halfZoomIn = (zoomIn) / 2;

            return [begin, end, delta, halfZoomIn];
        }

        $btnZoomIn.on('click', function() {

            const [begin, end, delta, halfZoomIn] = calculateHalfZoomIn();

            const newBegin = moment(begin.unix() + halfZoomIn, 'X');
            const newEnd = moment(end.unix() - halfZoomIn, 'X');

            $inputBeginEpoch.datetimepicker('date', newBegin);
            $inputEndEpoch.datetimepicker('date', newEnd);

            // if delta is lower than 5 minutes then disable the zoom in button
            if (delta < MAX_ZOOM_IN) {
                $(this).attr("disabled", "disabled");
            }

            $btnZoomOut.removeAttr("disabled");
        });

        $btnZoomOut.on('click', function() {

            const [begin, end, delta, halfZoomIn] = calculateHalfZoomIn();

            const newBegin = moment(begin.unix() - halfZoomIn, 'X');
            const newEnd = moment(end.unix() + halfZoomIn, 'X');

            $inputBeginEpoch.datetimepicker('date', newBegin);
            $inputEndEpoch.datetimepicker('date', newEnd);

            // if delta is lower than 5 minutes then disable the zoom in button
            if (delta > MAX_ZOOM_OUT) {
                $(this).attr("disabled", "disabled");
            }

            $btnZoomIn.removeAttr("disabled");
        });

        $('[data-toggle="tooltip"]').tooltip();

        $inputBeginEpoch.on("change.datetimepicker", function (e) {
            $inputEndEpoch.datetimepicker('minDate', e.date);
        });

    });
</script>